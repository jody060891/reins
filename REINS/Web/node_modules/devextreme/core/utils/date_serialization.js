/**
 * DevExtreme (core/utils/date_serialization.js)
 * Version: 16.2.5
 * Build date: Mon Feb 27 2017
 *
 * Copyright (c) 2012 - 2017 Developer Express Inc. ALL RIGHTS RESERVED
 * EULA: https://www.devexpress.com/Support/EULAs/DevExtreme.xml
 */
"use strict";
var commonUtils = require("./common"),
    isString = commonUtils.isString,
    isDate = commonUtils.isDate,
    isNumber = commonUtils.isNumber;
var NUMBER_SERIALIZATION_FORMAT = "number",
    DATE_SERIALIZATION_FORMAT = "yyyy/MM/dd",
    DATETIME_SERIALIZATION_FORMAT = "yyyy/MM/dd HH:mm:ss";
var SerializationHelper = function() {
    var that = this;
    var ensureTwoDigits = function(value) {
        return value < 10 ? "0" + value : value
    };
    that.formatDate = function(date, separator) {
        return that._joinDateParts(date.getFullYear(), date.getMonth(), date.getDate(), separator)
    };
    that._joinDateParts = function(year, month, day, separator) {
        return [year, ensureTwoDigits(month + 1), ensureTwoDigits(day)].join(separator)
    };
    that.formatTime = function(date, useSeconds, separator) {
        return that._joinTimeParts(date.getHours(), date.getMinutes(), date.getSeconds(), useSeconds, separator)
    };
    that._joinTimeParts = function(hours, minutes, seconds, useSeconds, separator) {
        var parts = [hours, minutes];
        if (useSeconds) {
            parts.push(seconds)
        }
        return parts.map(ensureTwoDigits).join(separator)
    };
    that.parseIsoDate = function(text) {
        var parts = text.split(/[^0-9]+/).map(Number);
        return that._createDate(parts[0], parts[1] - 1, parts[2], ~~parts[3], ~~parts[4], ~~parts[5])
    };
    that._createDate = function(year, month, day, hour, minute, second) {
        return new Date(year, month, day, hour, minute, second)
    }
};
var UtcSerializationHelper = function() {
    var that = this;
    SerializationHelper.call(that);
    that.formatDate = function(date, separator) {
        return that._joinDateParts(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), separator)
    };
    that.formatTime = function(date, useSeconds, separator) {
        return that._joinTimeParts(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), useSeconds, separator)
    };
    that._createDate = function(year, month, day, hour, minute, second) {
        return new Date(Date.UTC(year, month, day, hour, minute, second))
    }
};
var serializationHelper = new SerializationHelper,
    utcSerializationHelper = new UtcSerializationHelper;
var defaultParser = function(text) {
    var parsedValue = !isDate(text) && Date.parse(text);
    return isNumber(parsedValue) ? new Date(parsedValue) : text
};
var BASE_FORMATS = {};
BASE_FORMATS[NUMBER_SERIALIZATION_FORMAT] = {
    formatter: function(value) {
        return value && value.valueOf && value.valueOf()
    },
    parser: function(text) {
        return new Date(text)
    }
};
BASE_FORMATS[DATE_SERIALIZATION_FORMAT] = {
    formatter: function(date) {
        return serializationHelper.formatDate(date, "/")
    },
    parser: defaultParser
};
BASE_FORMATS[DATETIME_SERIALIZATION_FORMAT] = {
    formatter: function(date) {
        return serializationHelper.formatDate(date, "/") + " " + serializationHelper.formatTime(date, true, ":")
    },
    parser: defaultParser
};
var ISO8601_FORMATS = {
    "yyyy-MM-ddTHH:mm:ss": {
        formatter: function(date) {
            return serializationHelper.formatDate(date, "-") + "T" + serializationHelper.formatTime(date, true, ":")
        },
        parser: function(text) {
            if (!/\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d/.test(text)) {
                return
            }
            return serializationHelper.parseIsoDate(text)
        }
    },
    "yyyy-MM-ddTHH:mm:ssZ": {
        formatter: function(date) {
            return utcSerializationHelper.formatDate(date, "-") + "T" + utcSerializationHelper.formatTime(date, true, ":") + "Z"
        },
        parser: function(text) {
            if (!/\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\dZ/.test(text)) {
                return
            }
            return utcSerializationHelper.parseIsoDate(text)
        }
    },
    "yyyy-MM-ddTHH:mmZ": {
        formatter: function(date) {
            return utcSerializationHelper.formatDate(date, "-") + "T" + utcSerializationHelper.formatTime(date, false, ":") + "Z"
        },
        parser: function(text) {
            if (!/\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\dZ/.test(text)) {
                return
            }
            return utcSerializationHelper.parseIsoDate(text)
        }
    },
    yyyyMMddTHHmmss: {
        formatter: function(date) {
            return serializationHelper.formatDate(date, "") + "T" + serializationHelper.formatTime(date, true, "")
        },
        parser: function(text) {
            var parts = text.match(/(\d{4})(\d{2})(\d{2})T(\d{2})(\d{2})(\d{2})/).slice(1).map(Number);
            return new Date(parts[0], parts[1] - 1, parts[2], parts[3], parts[4], parts[5])
        }
    },
    "yyyy-MM-dd": {
        formatter: function(date) {
            return serializationHelper.formatDate(date, "-")
        },
        parser: function(text) {
            if (!/\d{4}-[01]\d-[0-3]\d/.test(text)) {
                return
            }
            return serializationHelper.parseIsoDate(text)
        }
    },
    "HH:mm": {
        formatter: function(date) {
            return serializationHelper.formatTime(date, false, ":")
        },
        parser: function(text) {
            if (!/[0-2]\d:[0-5]\d/.test(text)) {
                return
            }
            return new Date(0, 0, 0, Number(text.substr(0, 2)), Number(text.substr(3, 2)), 0, 0)
        }
    }
};
var getFormatInfo = function(serializationFormat) {
    if (!serializationFormat) {
        return
    }
    serializationFormat = serializationFormat.replace(/'/g, "");
    return BASE_FORMATS[serializationFormat] || ISO8601_FORMATS[serializationFormat]
};
var deserializeDate = function(value, serializationFormat) {
    if (!serializationFormat) {
        return defaultParser(value)
    }
    var formatInfo = getFormatInfo(serializationFormat);
    if (!formatInfo) {
        return
    }
    return formatInfo.parser(value)
};
var serializeDate = function(value, serializationFormat) {
    var formatInfo = getFormatInfo(serializationFormat);
    if (!formatInfo) {
        return value
    }
    if (serializationFormat !== NUMBER_SERIALIZATION_FORMAT && !isDate(value)) {
        return null
    }
    return formatInfo.formatter(value)
};
var getDateSerializationFormat = function(value) {
    if (isNumber(value)) {
        return NUMBER_SERIALIZATION_FORMAT
    } else {
        if (isString(value)) {
            if (value.indexOf(":") >= 0) {
                return DATETIME_SERIALIZATION_FORMAT
            } else {
                return DATE_SERIALIZATION_FORMAT
            }
        } else {
            if (value) {
                return null
            }
        }
    }
};
module.exports = {
    deserializeDate: deserializeDate,
    serializeDate: serializeDate,
    getDateSerializationFormat: getDateSerializationFormat
};
